openapi: 3.1.0
info: { title: Boat API, version: 1.0.0 }
paths:
  /api/auth/login:
    post:
      requestBody:
        required: true
        content: {
          application/json: {
            schema: {
              type: object,
              properties: {
                username: { type: string, minLength: 2 },
                password: { type: string, minLength: 8, maxLength: 16 }
              },
              required: [username,password]
            }
          }
        }
      responses:
        "200": { content: { application/json: { schema: { type: object, properties: { token: { type: string } } } } }, description: OK }
        "401": { description: Invalid credentials }
  /api/boats:
    get:
      security: [ { bearerAuth: [ ] } ]
      parameters:
        - { name: page, in: query, schema: { type: integer, default: 0 } }
        - { name: size, in: query, schema: { type: integer, default: 10 } }
      responses: { "200": { description: Page<Boat> } }
    post:
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: "#/components/schemas/BoatUpsert" } } }
      responses: { "201": { description: Created } }
  /api/boats/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security: [ { bearerAuth: [ ] } ]
      responses:
        "200": { description: Boat }
        "404": { description: "Boat not found." }
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security: [ { bearerAuth: [ ] } ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoatUpsert"
      responses:
        "200": { description: Boat }
        "400": { description: "Boat not found." }
        "404": { description: "Boat not found." }
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security: [ { bearerAuth: [ ] } ]
      responses:
        "204": { description: None }
        "404": { description: "Boat not found." }
components:
  securitySchemes: { bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT } }
  schemas:
    Boat: {
      type: object,
      properties: {
        id: { type: integer },
        name: { type: string },
        description: { type: string },
        type: { type: string },
        length: { type: number, minimum: 2.5 },
        createdAt: { type: string, format: date-time },
        updatedAt: { type: string, format: date-time }
      },
      required: [ id,name,description ]
    }
    BoatUpsert: {
      type: object,
      properties: {
        name: { type: string },
        description: { type: string },
        type: { type: string },
        length: { type: number, minimum: 2.5 }
      },
      required: [ name,description ]
    }
